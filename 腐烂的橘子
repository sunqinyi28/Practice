    public int orangesRotting(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int rows = grid.length;
        int cols = grid[0].length;
        int ok=0;
        int times=0;
        Queue<int[]> queue = new LinkedList<>();
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
            if(grid[i][j]==2) queue.offer(new int[] {i, j});
            else if(grid[i][j]==1) ok++;
        }
        }
        while(!queue.isEmpty()&&ok>0){
            times++;
            int len = queue.size();
            for(int i=0;i<len;i++){
                int[] u = queue.poll();
                int x=u[0];
                int y=u[1];
                if (x-1>=0&&grid[x-1][y]==1){
                    ok--;
                    grid[x-1][y]=2;
                    queue.offer(new int[] {x-1, y});
                }
                if (x+1<rows&&grid[x+1][y]==1){
                    ok--;
                    grid[x+1][y]=2;
                    queue.offer(new int[] {x+1, y});
                }
                if (y-1>=0&&grid[x][y-1]==1){
                    ok--;
                    grid[x][y-1]=2;
                    queue.offer(new int[] {x, y-1});
                }
                if (y+1<cols&&grid[x][y+1]==1){
                    ok--;
                    grid[x][y+1]=2;
                    queue.offer(new int[] {x, y+1});
                }
            }
        }
        if(ok!=0) return -1;
        return times;
    }
