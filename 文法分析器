
import java.util.Scanner;
/*
      E -> TE '
      E '-> + TE ' | e
      T ->FT '
      T '-> * FT '| e
      F -> (E) | i

      https://blog.csdn.net/qq_39800266/article/details/84312149?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159963400519724839253594%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159963400519724839253594&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~rank_business_v1-2-84312149.ecpm_v3_rank_business_v1&utm_term=%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90java&spm=1018.2118.3001.4187
 */
public class test2 {
    private static String Str = null; // 输入的表达式
    private static String lookahead = null;// 当前记号
    private static String Sub = null;// 剩余的子串

    public static void match(String s) {
        if (lookahead.equals(s)) {
            lookahead = nextToken();
            System.out.println("匹配" + s);
            if(s == "#"){
                System.out.printf("匹配成功！");
            }
        } else {
            error();
        }
    }
    public static void error() {
        System.out.println("匹配失败");
        System.exit(1);
    }

    public static String nextToken() {
        if (Sub.length() >= 2) {
            if (Sub.substring(0, 2).equals("i")) {
                Sub = Sub.substring(2, Sub.length());
                lookahead = "i";
            } else {
                lookahead = Sub.substring(0, 1);
                Sub = Sub.substring(1, Sub.length());
            }
        } else if (Sub.length() == 1) {
            lookahead = Sub.substring(0, 1);
        }
        return lookahead;
    }

    public static void E() {
        if (lookahead.equals("(") || lookahead.equals("i"))
        {
            System.out.println("E -> TE'");
            T();
            E1();
        } else if (lookahead.equals(")") || lookahead.equals("#"))
        {
            error();
        } else {
            lookahead = nextToken();
            error();
            E();
        }
    }

    public static void E1() {
        if (lookahead.equals("+")) {
            System.out.println("E1 -> TE'");
            match("+");
            T();
            E1();
        } else if (lookahead.equals(")") || lookahead.equals("#"))
        {
            System.out.println("E' -> ^");
            if (lookahead.equals("#"))
            {match("#");System.exit(0);}
        } else
        {
            error();
            lookahead = nextToken();
            E1();
        }
    }

    public static void T() {
        if (lookahead.equals("(") || lookahead.equals("i"))
        {
            System.out.println("T -> FT'");
            F();
            T1();
        } else if (lookahead.equals("+") || lookahead.equals(")") || lookahead.equals("#"))
        {
            error();
            if (lookahead.equals("#")) {
                match("#");
                System.exit(0);
            }
        } else {
            error();
            lookahead = nextToken();
            T();
        }
    }

    public static void T1() {
        if (lookahead.equals("*")) {
            System.out.println("T' -> *FT'");
            match("*");
            F();
            T1();
        } else if (lookahead.equals("+") || lookahead.equals(")") || lookahead.equals("#")) {
            System.out.println("T' -> ^");
            if (lookahead.equals("#")) {
                match("#");
                System.exit(0);
            }
        } else
        {
            error();
            lookahead = nextToken();
            T1();
        }
    }

    public static void F() {
        if (lookahead.equals("(")) {
            match("(");
            E();
            match(")");
            System.out.println("F -> (E)");
        } else if (lookahead.equals("i")) {
            System.out.println("F -> i");
            match("i");
        } else if (lookahead.equals("+") || lookahead.equals("*") || lookahead.equals(")") || lookahead.equals("#"))
        {
            error();
        } else
        {
            error();
            lookahead = nextToken();
            F();
        }
    }

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        System.out.printf("参照文法：");
        System.out.println("      E -> TE '\n" +
                "                E '-> + TE ' | e\n" +
                "                T ->FT '\n" +
                "                T '-> * FT '| e\n" +
                "                F -> (E) | i");
        System.out.println("请输入一个表达式(以#结尾)：");
        Str = in.nextLine();
        Sub = Str;
        lookahead = nextToken();
        in.close();
        E();
    }
}


